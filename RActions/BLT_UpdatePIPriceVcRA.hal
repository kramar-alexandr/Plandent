external inner updating function Integer CreateMailFromIVD(record IVVc,var record MailVc,var string,Boolean,string);

global
function LongInt BLT_UpdatePIPriceVcRecordCheck(Var Record BLT_UpdatePIPriceVc BLT_UpdatePIPricer, Record BLT_UpdatePIPriceVc BLT_UpdatePIPrice2r, LongInt stat, LongInt check)
begin
  LongInt res;

  res = 0;
  if BLT_UpdatePIPricer.SerNr == -1 then begin
    if CountRecords("BLT_UpdatePIPriceVc") == 0 then begin
      BLT_UpdatePIPricer.SerNr = 10001;
    end else begin
      BLT_UpdatePIPricer.SerNr = NextSerNr("BLT_UpdatePIPriceVc",CurrentDate,-1,false,"");
    end;
  end;

EndBLT_UpdatePIPriceVcRecordCheck:;
  BLT_UpdatePIPriceVcRecordCheck = res;
  return;
end;

global
function LongInt BLT_UpdatePIPriceVcRecordDuplicate(Var Record BLT_UpdatePIPriceVc BLT_UpdatePIPricer, Record BLT_UpdatePIPriceVc BLT_UpdatePIPrice2r, LongInt long3, LongInt long4)
begin
  LongInt res;

  res = -1;
  BLT_UpdatePIPricer.SerNr = -1;

  BLT_UpdatePIPriceVcRecordDuplicate = res;
  return;
end;


global
updating function LongInt IVVcRecordUpdateAfter(var record IVVc IVr,record IVVc IV2r,LongInt long3,LongInt long4)
BEGIN
	longint res;
	record IVMailBlock IVMb;
	record MailVc Mailr,oldMailr;
	Integer err;
	string 200 tstr,docname;
	blockload(IVMb);
	
	res = inner.IVVcRecordUpdateAfter(IVr,IV2r,long3,long4);
	
	if(IVr.OKFlag==1 and IV2r.OKFlag==0)then begin
		if(IVMb.AutoSendIV==1)then begin
			docname = "InvForm";
			switch (IVr.InvType) begin
				case kInvoiceTypeCash: docname = "CashInvForm";
				case kInvoiceTypeCashInvoiceReceiptPRT: docname = "CashInvRecPRTForm";
				case kInvoiceTypeCredit: docname = "CredInvForm";
				case kInvoiceTypeInterest: docname = "IIInvForm";
				case kInvoiceTypeCreditSpecialSales: docname = "CredInvForm";
			end;
			
			err = CreateMailFromIVD(IVr,Mailr,tstr,false,docname);
			if(err==0)then begin
				recordcopy(oldMailr,Mailr);
				Mailr.SendFlag = 1;
				recordupdate(oldMailr,Mailr,true);
			end;
		end;
	end;
	
	IVVcRecordUpdateAfter = res; 
return;
end;

global
updating function LongInt IVVcRecordSaveAfter(var record IVVc IVr,record IVVc IV2r,LongInt long3,LongInt long4)
BEGIN
	longint res;
	record IVMailBlock IVMb;
	record MailVc Mailr,oldMailr;
	Integer err;
	string 200 tstr,docname;
	blockload(IVMb);
	
	res = inner.IVVcRecordSaveAfter(IVr,IV2r,long3,long4);
	if(IVr.OKFlag==1)then begin
		if(IVMb.AutoSendIV==1)then begin
			docname = "InvForm";
			switch (IVr.InvType) begin
				case kInvoiceTypeCash: docname = "CashInvForm";
				case kInvoiceTypeCashInvoiceReceiptPRT: docname = "CashInvRecPRTForm";
				case kInvoiceTypeCredit: docname = "CredInvForm";
				case kInvoiceTypeInterest: docname = "IIInvForm";
				case kInvoiceTypeCreditSpecialSales: docname = "CredInvForm";
			end;
		
			err = CreateMailFromIVD(IVr,Mailr,tstr,false,docname);
			if(err==0)then begin
				recordcopy(oldMailr,Mailr);
				Mailr.SendFlag = 1;
				recordupdate(oldMailr,Mailr,true);
			end;
		end;
	end;
	
	IVVcRecordSaveAfter = res; 
return;
end;

global
updating function LongInt IVVcRecordCheck(record IVVc IVp,record IVVc IV2p,LongInt stat,LongInt long4)
begin
  LongInt res;
  
  IVp.NoEInvoice = 1;
  res = inner.IVVcRecordCheck(IVp,IV2p,stat,long4);
  
  IVVcRecordCheck = res;
return;
end;



external function roundmode SetRoundModeD(Integer);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external procedure Base1ToBase2(var val,Date,var val);
external procedure M4PadString(string,Integer,string,Boolean,var string);
external function Boolean GetFirstItem(var string,var record INVc);
external function Boolean GetFirstPurchaseItem2(string,string,string,var record PIVc);

procedure RemoveCharacterFromString(var string res,string tstr)
begin
  string 1 char;
  string 10 new_char;
  Integer i, n;

  n = BytesInString(res);
  for (i=0;i<n;i=i+1) begin
    char = Mid(tstr,i,1);
    switch (char) begin
      case "&": new_char = "&amp;";
      case "<": new_char = "&lt;";
      case ">": new_char = "&gt;";
      case """": new_char = "&quot;";
      case "Ã®": new_char = "&#8221;";
      case "'": new_char = "&apos;";
      otherwise new_char = char;
    end;
    res = res & new_char;
  end;
  return;
end;

global
procedure LitIntVIEn(record RcVc RepSpec)
begin
  record INVc INr;
  record CUVc VEr;
  record CUVc VE2r,Ve3r;
  record CUVc ContactCUr;
  record VIVc VIr;
  record POVc POr;
  record PIVc PIr;
  record PUVc PUr;
  record CommodityVc Cr;
  row PUVc PUrw;
  row POVc POrw;
  record CYBlock CYRec;
  Boolean TrHs,testf,TrHs2,testf2;
  Date ed,curdate,d;
  LongInt frvi,tovi;
  string 255 tstr,tstr2;
  Integer i,rwcnt,leng,acnt,ai,p,len1;
  val t,t2,t3,inv_val,stat_val,freight_coeff,x;
  array string 8 a1;
  array string 100 a2;
  array string 1 a3;
  array string 2 a4;
  array string 3 a5;
  array string 2 a6;
  array string 2 a7;
  array string 2 a8;
  array val a9;
  array string 3 a10;
  array val a11;
  array val a12;
  array val a13;
  array longint POrNrs;
  string 10 b1,b3,b4,b5,b6,b7,b8;
  longint POrcnt;
  record BaseCurBlock BCbr;

  curdate = CurrentDate;
  BlockLoad(CYRec);
  BlockLoad(BCbr);
  ed = AddDay(RepSpec.sEndDate,1);
  if ((GetDay(RepSpec.sStartDate)==1) and (GetDay(ed)==1)) then begin
    if (GetMonth(RepSpec.sStartDate)==GetMonth(RepSpec.sEndDate)) then begin
    end else begin
      LogText2(38600," : " & USetStr(18573),kVerbosityVerbose);
      goto L99;
    end;
  end else begin
      LogText2(38600," : " & USetStr(18573),kVerbosityVerbose);
    goto L99;
  end;
  if (blank(RepSpec.f4) or blank(RepSpec.f5)) or blank(RepSpec.f1) then begin
    LogText2(38600," : " & USetStr(18573),kVerbosityVerbose);
    goto L99;
  end;
  TrHs = true;
  acnt = 0;
  POrcnt = 0;
  inv_val = 0;

  LogText2(38600," : " & USetStr(20921),kVerbosityVerbose);
  if (SetExportCodepage("UTF-8")) then begin end;
  VIr.TransDate = RepSpec.sStartDate;
  while (LoopKey("TransDate",VIr,1,TrHs)) begin
    if (VIr.TransDate>RepSpec.sEndDate) then begin TrHs = false; end;
    if (TrHs) then begin
      testf = true;
      if (VIr.ExportFlag!=1) then begin testf = false; end;//1 = inside EU
      if (testf) then begin
        VEr.Code = VIr.VECode;
        if (ReadFirstMain(VEr,1,true)) then begin end;
        POr.SerNr = VIr.POSerNr;
        if (ReadFirstMain(POr,1,true)) then begin
          if (POr.ExportFlag==1) then begin
            for (p=0;p<POrcnt;p=p+1) begin
            if (POr.SerNr==POrNrs[p]) then begin
              goto LSKIPPOr;
            end; // if
          end; // for
          POrNrs[POrcnt] = POr.SerNr;
          POrcnt = POrcnt + 1;
          ResetLoop(PUr);
          PUr.PONr = POr.SerNr;
          TrHs2 = true;
          while (LoopKey("PONr",PUr,1,TrHs2)) begin
            testf2 = true;
            if (PUr.PONr <> POr.SerNr) then begin
              TrHs2 = false;
            end;
            if (PUr.OKFlag == 0) then begin
              testf2 = false;
            end;
            if (DateInRange(PUr.TransDate,RepSpec.sStartDate,RepSpec.sEndDate)==false) then begin
              testf2 = false;
            end;
            if (TrHs2 and testf2) then begin
              rwcnt = MatRowCnt(PUr);
              if (nonblank(VIr.StatVal)) then begin
                stat_val = VIr.StatVal;
              end;
              if (blank(VIr.StatVal) or (VIr.StatVal == 0)) then begin
                stat_val = 0;
              end;
              if (nonblank(PUr.ShipCost)) then begin
                if BCbr.BaseCur1 == "EUR" then begin
                  freight_coeff = stat_val/PUr.ShipCost;
                end else begin
                  x = 0;
                  Base1ToBase2(PUr.ShipCost,CurrentDate,x);
                  freight_coeff = stat_val/x;
                end;
              end;
              if (PUr.ShipCost == 0) then begin
                if BCbr.BaseCur1 == "EUR" then begin
                  freight_coeff = -(stat_val/PUr.SumCostPrice);
                end else begin
                  x = 0;
                  Base1ToBase2(PUr.SumCostPrice,CurrentDate,x);
                  freight_coeff = -(stat_val/x);
                end;
              end;
              for (i=0;i<rwcnt;i=i+1) begin
                MatRowGet(PUr,i,PUrw);
                if (GetFirstItem(PUrw.ArtCode,INr)) then begin
                    if (GetFirstPurchaseItem2(PUrw.ArtCode,PUr.Location,VIr.VECode,PIr)) then begin end;
                      if ((INr.ItemType == 1) or (INr.ItemType == 2)) then begin
                        t = INr.Weight*PUrw.Quant;
                      if BCbr.BaseCur1 == "EUR" then begin
                        t2 = MulRateToBase1(PUr.CurncyCode,PUrw.UPrice*PUrw.Quant,Pur.FrRate,Pur.ToRateB1,Pur.ToRateB2,Pur.BaseRate1,Pur.BaseRate2,SetRoundModeD(2));
                      end else begin
                        t2 = MulRateToBase2(PUr.CurncyCode,PUrw.UPrice*PUrw.Quant,Pur.FrRate,Pur.ToRateB1,Pur.ToRateB2,Pur.BaseRate1,Pur.BaseRate2,SetRoundModeD(2));
                      end;
                      if BCbr.BaseCur1 == "EUR" then begin
                        t3 = Round(t2 + PUrw.ShipCost*PUrw.Quant,SetRoundModeD(2));
                      end else begin
                      x = 0;
                      Base1ToBase2(PUrw.ShipCost,CurrentDate,x);
                      t3 = Round(t2 + x*PUrw.Quant,SetRoundModeD(2));
                    end;
                    b1 = INr.EUCodex;
                    RemoveCharacterFromString(b1,"");
                    if (nonblank(VIr.RefStr)) then begin
                      b4 = VIr.RefStr;
                    end else begin
                      b4 = "11";
                    end;
                    RemoveCharacterFromString(b4,"");
                    b5 = POr.ShipDeal;
                    RemoveCharacterFromString(b5,"");
                    b6 = POr.ShipMode;
                    RemoveCharacterFromString(b6,"");
                    b7 = VEr.CountryCode;
                    RemoveCharacterFromString(b7,"");
                    if (nonblank(PUrw.CountryOfOrg)) then begin
                      b8 = PUrw.CountryOfOrg;
                    end else begin
                      b8 = PIr.OrgCountry;
                    end;
                    RemoveCharacterFromString(b8,"");
                    for (ai=0;ai<acnt;ai=ai+1) begin
                      if ((b1==a1[ai]) and (b3==a3[ai]) and (b4==a4[ai]) and (b5==a5[ai]) and (b6==a6[ai]) and (b7==a7[ai]) and (b8==a8[ai])) then begin
                        a9[ai] = a9[ai] + t;
                        tstr = INr.Unittext2;
                        RemoveCharacterFromString(tstr,"");
                        if (nonblank(tstr)) then begin
                          a11[ai] = a11[ai] + INr.UnitCoefficient*PUrw.Quant;
                        end else begin
                          a11[ai] = 0;
                        end;
                        a12[ai] = a12[ai] + t2;
                        inv_val = inv_val + t2;
                        a13[ai] = a13[ai] + t3;
                        goto LSKIP;
                      end;
                    end;
                    a1[acnt] = b1;
                    Cr.Number = INr.EUCodex;
                    tstr = "";
                    if (ReadFirstMain(Cr,1,true)) then begin
                      tstr = Cr.Comment;
                    end;
                    RemoveCharacterFromString(tstr,"");
                    a2[acnt] = tstr;
                    a3[acnt] = b3;
                    a4[acnt] = b4;
                    a5[acnt] = b5;
                    a6[acnt] = b6;
                    a7[acnt] = b7;
                    a8[acnt] = b8;
                    a9[acnt] = t;
                    tstr = INr.Unittext2;
                    RemoveCharacterFromString(tstr,"");
                    a10[acnt] = tstr;
                    if (nonblank(tstr)) then begin
                      a11[acnt] = PUrw.Coefficient*PUrw.Quant;
                    end else begin
                      a11[acnt] = 0;
                    end;
                    a12[acnt] = t2;
                    inv_val = inv_val + t2;
                    a13[acnt] = t3;
                    acnt = acnt + 1;
                    LSKIP:;
                  end;
                end;
              end;
            end;
          end;
        end;
LSKIPPOr:;
      end;
    end;
  end;
  end;
  if (acnt>0) then begin
    tstr2 = "<INSTAT xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:noNamespaceSchemaLocation=""instat62.xsd"">";
    ExportPadString(tstr2,BytesInString(tstr2)," ",false);
    NewLine;
    ExportPadString("<Envelope>",10," ",false);
    NewLine;
    ExportPadString("<envelopeId>",12," ",false);
    ExportPadString(RepSpec.f1,BytesInString(RepSpec.f1)," ",false);
    ExportPadString("</envelopeId>",13," ",false);
    NewLine;
    ExportPadString("<DateTime>",10," ",false);
    NewLine;
    if (nonblank(RepSpec.d1)) then begin
      d = CurrentDate;
    end else begin
      d = CurrentDate;
    end;
    tstr = DateToString(d,"YYYY-MM-DD");
    ExportPadString("<date>",6," ",false);
    ExportPadString(tstr,10,"",false);
    ExportPadString("</date>",7," ",false);
    NewLine;
    ExportPadString("</DateTime>",11," ",false);
    NewLine;
    if blank(RepSpec.f6) then begin
      ExportPadString("<Party partyType=""PSI"" partyRole=""sender"">",42," ",false);
    end else begin
      ExportPadString("<Party partyType=""PSI"" partyRole=""PSI"">",39," ",false);
    end;
    NewLine;
    ExportPadString("<partyId>",9," ",false);
    tstr = CYRec.VATNr;
    len1 = BytesInString(tstr);
    tstr = Right(tstr,len1-2);
    RemoveCharacterFromString(tstr,"");
    ExportPadString(tstr,BytesInString(tstr),"0",true);
    ExportPadString("</partyId>",10," ",false);
    NewLine;
    ExportPadString("<partyName>",11," ",false);
    tstr = CYRec.CompName;
    RemoveCharacterFromString(tstr,"");
    ExportPadString(tstr,BytesInString(tstr)," ",true);
    ExportPadString("</partyName>",12," ",false);
    NewLine;
    ExportPadString("<interchangeAgreementId>",24," ",false);
    tstr = CYRec.HomeCommunity;
    RemoveCharacterFromString(tstr,"");
    ExportPadString(tstr,BytesInString(tstr)," ",true);
    ExportPadString("</interchangeAgreementId>",25," ",false);
    NewLine;
    ExportPadString("<Address>",9," ",false);
    NewLine;
    tstr = CYRec.Addr0;
    if (nonblank(CYRec.Addr1)) then begin
      tstr = tstr & " " & CYRec.Addr1 ;
    end;
    if (nonblank(CYRec.Addr2)) then begin
      tstr = tstr & " " & CYRec.Addr2 ;
    end;
    if (nonblank(CYRec.Addr3)) then begin
      tstr = tstr & " " & CYRec.Addr3 ;
    end;
    RemoveCharacterFromString(tstr,"");
    if (BytesInString(tstr)>60) then begin
      leng = BytesInString(Mid(tstr,0,60));
    end else begin
      leng = BytesInString(tstr);
    end;
    ExportPadString("<adresas>",9," ",false);
    ExportPadString(tstr,leng,"",false);
    ExportPadString("</adresas>",10," ",false);
    NewLine;
    tstr = CYRec.Phone;
    RemoveCharacterFromString(tstr,"");
    if (BytesInString(tstr)>15) then begin
      leng = BytesInString(Mid(tstr,0,15));
    end else begin
      leng = BytesInString(tstr);
    end;
    ExportPadString("<phoneNumber>",13," ",false);
    ExportPadString(tstr,leng,"",false);
    ExportPadString("</phoneNumber>",14," ",false);
    NewLine;
    tstr = CYRec.Fax;
    RemoveCharacterFromString(tstr,"");
    if (BytesInString(tstr)>15) then begin
      leng = BytesInString(Mid(tstr,0,15));
    end else begin
      leng = BytesInString(tstr);
    end;
    ExportPadString("<faxNumber>",11," ",false);
    ExportPadString(tstr,leng,"",false);
    ExportPadString("</faxNumber>",12," ",false);
    NewLine;
    tstr = CYRec.emailAddr;
    RemoveCharacterFromString(tstr,"");
    if (BytesInString(tstr)>35) then begin
      leng = BytesInString(Mid(tstr,0,35));
    end else begin
      leng = BytesInString(tstr);
    end;
    ExportPadString("<e-mail>",8," ",false);
    ExportPadString(tstr,leng,"",false);
    ExportPadString("</e-mail>",9," ",false);
    NewLine;
    ExportPadString("</Address>",10," ",false);
    NewLine;
    ExportPadString("<ContactPerson>",15," ",false);
    NewLine;
    ContactCUr.Code = RepSpec.f5;
    if ReadfirstMain(ContactCUr,1,true) then begin end;
    tstr = ContactCUr.Name;
    RemoveCharacterFromString(tstr,"");
    ExportPadString("<contactPersonName>",19," ",false);
    ExportPadString(tstr,BytesInString(tstr),"",true);
    ExportPadString("</contactPersonName>",20," ",false);
    NewLine;
    tstr = ContactCUr.Phone;
    if (BytesInString(tstr)>15) then begin
      leng = 15;
    end else begin
      leng = BytesInString(tstr);
    end;
    RemoveCharacterFromString(tstr,"");
    ExportPadString("<phoneNumber>",13," ",false);
    ExportPadString(tstr,leng,"",true);
    ExportPadString("</phoneNumber>",14," ",false);
    NewLine;
    tstr = ContactCUr.Fax;
    if (BytesInString(tstr)>15) then begin
      leng = 15;
    end else begin
      leng = BytesInString(tstr);
    end;
    RemoveCharacterFromString(tstr,"");
    ExportPadString("<faxNumber>",11," ",false);
    ExportPadString(tstr,leng,"",true);
    ExportPadString("</faxNumber>",12," ",false);
    NewLine;
    tstr = ContactCUr.eMail;
    if (BytesInString(tstr)>35) then begin
      leng = 35;
    end else begin
      leng = BytesInString(tstr);
    end;
    RemoveCharacterFromString(tstr,"");
    ExportPadString("<e-mail>",8," ",false);
    ExportPadString(tstr,leng,"",true);
    ExportPadString("</e-mail>",9," ",false);
    NewLine;
    ExportPadString("</ContactPerson>",16," ",false);
    NewLine;
    ExportPadString("</Party>",16," ",false);
    NewLine;
    if nonblank(RepSpec.f6) then begin
      ExportPadString("<Party partyType=""TDP"" partyRole=""sender"">",42," ",false);
      NewLine;
      VE2r.Code = RepSpec.f6;
      if (ReadFirstMain(VE2r,1,true)) then begin end;
      tstr = VE2r.Code;
      RemoveCharacterFromString(tstr,"");
      ExportPadString("<partyId>",9," ",false);
      ExportPadString(tstr,BytesInString(tstr),"0",true);
      ExportPadString("</partyId>",10," ",false);
      NewLine;

      tstr = VE2r.Name;
      RemoveCharacterFromString(tstr,"");
      ExportPadString("<partyName>",11," ",false);
      ExportPadString(tstr,BytesInString(tstr),"0",true);
      ExportPadString("</partyName>",12," ",false);
      NewLine;
      ExportPadString("<Address>",9," ",false);
      NewLine;
      tstr = VE2r.InvAddr0;
      if (nonblank(VE2r.InvAddr1)) then begin
        tstr = tstr & " " & VE2r.InvAddr1;
      end;
      if (nonblank(VE2r.InvAddr2)) then begin
        tstr = tstr & " " & VE2r.InvAddr2;
      end;
      if (nonblank(VE2r.InvAddr3)) then begin
        tstr = tstr & " " & VE2r.InvAddr3;
      end;
      if (nonblank(VE2r.InvAddr4)) then begin
        tstr = tstr & " " & VE2r.InvAddr4;
      end;
      RemoveCharacterFromString(tstr,"");
      if (BytesInString(tstr)>60) then begin
        leng = BytesInString(Mid(tstr,0,60));
      end else begin
        leng = BytesInString(tstr);
      end;
      ExportPadString("<adresas>",9," ",false);
      ExportPadString(tstr,leng,"",false);
      ExportPadString("</adresas>",10," ",false);
      NewLine;

      tstr = VE2r.Phone;
      RemoveCharacterFromString(tstr,"");
      if (BytesInString(tstr)>15) then begin
        leng = BytesInString(Mid(tstr,0,15));
      end else begin
        leng = BytesInString(tstr);
      end;
      ExportPadString("<phoneNumber>",13," ",false);
      ExportPadString(tstr,leng,"",false);
      ExportPadString("</phoneNumber>",14," ",false);
      NewLine;
      tstr = VE2r.Fax;
      RemoveCharacterFromString(tstr,"");
      if (BytesInString(tstr)>15) then begin
        leng = BytesInString(Mid(tstr,0,15));
      end else begin
        leng = BytesInString(tstr);
      end;
      ExportPadString("<faxNumber>",11," ",false);
      ExportPadString(tstr,leng,"",false);
      ExportPadString("</faxNumber>",12," ",false);
      NewLine;
      tstr = VE2r.eMail;
      RemoveCharacterFromString(tstr,"");
      if (BytesInString(tstr)>35) then begin
        leng = BytesInString(Mid(tstr,0,35));
      end else begin
        leng = BytesInString(tstr);
      end;
      ExportPadString("<e-mail>",8," ",false);
      ExportPadString(tstr,leng,"",false);
      ExportPadString("</e-mail>",9," ",false);
      NewLine;
      ExportPadString("</Address>",10," ",false);
      NewLine;
      ExportPadString("</Party>",8," ",false);
      NewLine;
    end;
    ExportPadString("<Party partyType=""CC"" partyRole=""receiver"">",43," ",false);
    NewLine;
    tstr = "MM39";
    ExportPadString("<partyId>",9," ",false);
    ExportPadString(tstr,4,"0",true);
    ExportPadString("</partyId>",10," ",false);
    NewLine;
    ExportPadString("<partyName>",11," ",false);
    tstr =  URLDecode("Muitin%C4%97s%20departamento%20Statistikos%20analiz%C4%97s%20skyrius");  // Urlencoded: MuitinÄs departamento Statistikos analizÄs skyrius
    RemoveCharacterFromString(tstr,"");
    ExportPadString(tstr,BytesInString(tstr)," ",true);
    ExportPadString("</partyName>",12," ",false);
    NewLine;
    ExportPadString("<Address>",9," ",false);
    NewLine;
    ExportPadString("<adresas>",9," ",false);
    tstr = URLDecode("A.%20Jak%C5%A1to%20g.%201%2C%20LT-01105%2C%20Vilnius"); // Urlencoded: A. JakÅ¡to g. 1, LT-01105, Vilnius
    RemoveCharacterFromString(tstr,"");
    ExportPadString(tstr,BytesInString(tstr)," ",true);
    ExportPadString("</adresas>",10," ",false);
    NewLine;
    ExportPadString("<phoneNumber></phoneNumber>",27," ",false);
    NewLine;
    ExportPadString("</Address>",10," ",false);
    NewLine;
    ExportPadString("</Party>",8," ",false);
    NewLine;
    ExportPadString("<softwareUsed>notepad</softwareUsed>",36," ",false);
    NewLine;
    ExportPadString("<Declaration>",13," ",false);
    NewLine;
    ExportPadString("<declarationId>",15," ",false);
    ExportPadString(RepSpec.f4,BytesInString(RepSpec.f4)," ",false);
    ExportPadString("</declarationId>",16," ",false);
    NewLine;
    ExportPadString("<DateTime>",10," ",false);
    NewLine;
    ExportPadString("<date>",6," ",false);
    if (nonblank(RepSpec.d1)) then begin
      d = CurrentDate;
    end else begin
      d = CurrentDate;
    end;
    tstr = DateToString(d,"YYYY-MM-DD");
    ExportPadString(tstr,BytesInString(tstr)," ",false);
    ExportPadString("</date>",7," ",false);
    NewLine;
    ExportPadString("</DateTime>",11," ",false);
    NewLine;
    tstr = GetYear(RepSpec.sStartDate);
    tstr2 = GetMonth(RepSpec.sStartDate);
    if (BytesInString(tstr2)==1) then begin
      tstr = tstr & "-0" & tstr2;
    end else begin
      tstr = tstr & "-" & tstr2;
    end;
    ExportPadString("<referencePeriod>",17," ",false);
    ExportPadString(tstr,7,"",true);
    ExportPadString("</referencePeriod>",18," ",false);
    NewLine;
    ExportPadString("<PSIId>",7," ",false);
    tstr = CYRec.VATNr;
    len1 = BytesInString(tstr);
    tstr = Right(tstr,len1-2);
    RemoveCharacterFromString(tstr,"");
    ExportPadString(tstr,BytesInString(tstr),"0",true);
    ExportPadString("</PSIId>",8," ",false);
    NewLine;
    ExportPadString("<Function>",10," ",false);
    NewLine;
    ExportPadString("<functionCode>",14," ",false);
    tstr = RepSpec.f3;
    ExportPadString(tstr,BytesInString(tstr),"",true);
    ExportPadString("</functionCode>",15," ",false);
    NewLine;
    ExportPadString("</Function>",11," ",false);
    NewLine;
    ExportPadString("<flowCode>A</flowCode>",22," ",false);
    NewLine;
    ExportPadString("<currencyCode>EUR</currencyCode>",32," ",false);
    NewLine;
    ExportPadString("<totalInvoicedAmount>",21," ",false);
    inv_val = Round(inv_val,SetRoundModeD(0));
    tstr = ValToString(inv_val,M4UVal,"",".",0);
    ExportPadString(tstr,BytesInString(tstr),"",true);
    ExportPadString("</totalInvoicedAmount>",22," ",false);
    NewLine;
    for (ai=0;ai<acnt;ai=ai+1) begin
      ExportPadString("<Item>",6," ",false);
      NewLine;
      ExportPadString("<itemNumber>",12," ",false);
      ExportPadString(ai+1,BytesInString(ai+1),"",true);
      ExportPadString("</itemNumber>",13," ",false);
      NewLine;
      ExportPadString("<CN8>",5," ",false);
      NewLine;
      ExportPadString("<CN8Code>",9," ",false);
      ExportPadString(a1[ai],BytesInString(a1[ai]),"",true);
      ExportPadString("</CN8Code>",10," ",false);
      NewLine;
      if nonblank(a10[ai]) then begin
        ExportPadString("<SUCode>",8," ",false);
        ExportPadString(a10[ai],BytesInString(a10[ai]),"",true);
        ExportPadString("</SUCode>",9," ",false);
        NewLine;
      end;
      ExportPadString("</CN8>",6," ",false);
      NewLine;
      ExportPadString("<goodsDescription>",18," ",false);
      ExportPadString(a2[ai],BytesInString(a2[ai]),"",true);
      ExportPadString("</goodsDescription>",19," ",false);
      NewLine;
      ExportPadString("<MSConsDestCode>",16," ",false);
      ExportPadString(a7[ai],BytesInString(a7[ai]),"",true);
      ExportPadString("</MSConsDestCode>",17," ",false);
      NewLine;
      ExportPadString("<countryOfOriginCode>",21," ",false);
      ExportPadString(a8[ai],BytesInString(a8[ai]),"",true);
      ExportPadString("</countryOfOriginCode>",22," ",false);
      NewLine;
      ExportPadString("<netMass>",9," ",false);
      a9[ai] = a9[ai] * 10;
      a9[ai] = Round(a9[ai],SetRoundModeD(3));
      tstr = ValToString(a9[ai],M423Val,"","",0);
      ExportPadString(tstr,BytesInString(tstr),"",true);
      ExportPadString("</netMass>",10," ",false);
      NewLine;
      ExportPadString("<quantityInSU>",14," ",false);
      a11[ai] = a11[ai] * 10;
      a11[ai] = Round(a11[ai],SetRoundModeD(3));
      tstr = ValToString(a11[ai],M4Val,"","",0);
      ExportPadString(tstr,BytesInString(tstr),"",true);
      ExportPadString("</quantityInSU>",15," ",false);
      NewLine;
      ExportPadString("<invoicedAmount>",16," ",false);
      if (a12[ai]<1) then begin
      end else begin
        a12[ai] = Round(a12[ai],SetRoundModeD(0));
        tstr = ValToString(a12[ai],M4UVal,"",",",0);
        ExportPadString(tstr,BytesInString(tstr),"",true);
      end;
      ExportPadString("</invoicedAmount>",17," ",false);
      NewLine;
      ExportPadString("<statisticalValue>",18," ",false);
      a13[ai] = Round(a13[ai],SetRoundModeD(0));
      tstr = ValToString(a13[ai],M4UVal,"",",",0);
      ExportPadString(tstr,BytesInString(tstr),"",true);
      ExportPadString("</statisticalValue>",19," ",false);
      NewLine;
      ExportPadString("<NatureOfTransaction>",21," ",false);
      NewLine;
      ExportPadString("<natureOfTransactionACode>",26," ",false);
      ExportPadString(Left(a4[ai],1),1,"",true); //??
      ExportPadString("</natureOfTransactionACode>",27," ",false);
      NewLine;
      ExportPadString("<natureOfTransactionBCode>",26," ",false);
      ExportPadString(Right(a4[ai],1),1,"",true); //??
      ExportPadString("</natureOfTransactionBCode>",27," ",false);
      NewLine;
      ExportPadString("</NatureOfTransaction>",22," ",false);
      NewLine;
      ExportPadString("<modeOfTransportCode>",21," ",false);
      ExportPadString(a6[ai],BytesInString(a6[ai]),"",true);
      ExportPadString("</modeOfTransportCode>",22," ",false);
      NewLine;
      ExportPadString("<regionCode>",12," ",false);
      ExportPadString(a3[ai],BytesInString(a3[ai]),"",true);
      ExportPadString("</regionCode>",13," ",false);
      NewLine;
      ExportPadString("<DeliveryTerms>",15," ",false);
      NewLine;
      ExportPadString("<TODCode>",9," ",false);
      ExportPadString(a5[ai],BytesInString(a5[ai]),"",true);
      ExportPadString("</TODCode>",10," ",false);
      NewLine;
      ExportPadString("</DeliveryTerms>",16," ",false);
      NewLine;
      ExportPadString("</Item>",7," ",false);
      NewLine;
    end;
    ExportPadString("<totalNumberDetailedLines>",26," ",false);
    ExportPadString(acnt,BytesInString(acnt),"",true);
    ExportPadString("</totalNumberDetailedLines>",27," ",false);
    NewLine;
    ExportPadString("</Declaration>",16," ",false);
    NewLine;
    ExportPadString("<numberOfDeclarations>1</numberOfDeclarations>",46," ",false);
    NewLine;
    ExportPadString("</Envelope>",11," ",false);
    NewLine;
    ExportPadString("</INSTAT>",9," ",false);
  end;
  L99:;
  return;
end;
